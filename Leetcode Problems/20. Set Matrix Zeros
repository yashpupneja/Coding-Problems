// Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

// Follow up:

// A straight forward solution using O(mn) space is probably a bad idea.
// A simple improvement uses O(m + n) space, but still not the best solution.
// Could you devise a constant space solution?
 

// Example 1:


// Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
// Output: [[1,0,1],[0,0,0],[1,0,1]]
// Example 2:


// Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
// Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

// Constraints:

// m == matrix.length
// n == matrix[0].length
// 1 <= m, n <= 200
// -231 <= matrix[i][j] <= 231 - 1

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int matrix[100][100];
void matrixzeros(int matrix[][100],int m,int n){
  bool row=false,col=false;
  for(int i=0;i<m;i++){
    if(matrix[i][0]==0){
      col=true;
      break;
    }
  }
  for(int i=0;i<n;i++){
    if(matrix[0][i]==0){
      row=true;
      break;
    }
  }
  for(int i=1;i<m;i++){
    for(int j=1;j<n;j++){
      if(matrix[i][j]==0){
        matrix[i][0]=0;
        matrix[0][j]=0;
      }
      if(matrix[i][0]==0||matrix[0][j]==0) matrix[i][j]=0;
    }
  }
  if(row==true){
    for(int i=0;i<n;i++) matrix[0][i]=0;
  }
  if(col==true){
    for(int i=0;i<m;i++) matrix[i][0]=0;
  }
}
int main() {
  int m,n;
  cin>>m>>n;
  for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
      cin>>matrix[i][j];
    }
  }
  matrixzeros(matrix,m,n);
  for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
      cout<<matrix[i][j];
    }
  }
return 0;
}
